/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class RobotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Robot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRobotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cTopologyKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTopologiesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTopologiesTopologyParserRuleCall_3_0 = (RuleCall)cTopologiesAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cLinkAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cLinkLinkParserRuleCall_4_0_0 = (RuleCall)cLinkAssignment_4_0.eContents().get(0);
		private final Assignment cJointAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cJointJointParserRuleCall_4_1_0 = (RuleCall)cJointAssignment_4_1.eContents().get(0);
		private final Assignment cLinkrefsAssignment_4_2 = (Assignment)cAlternatives_4.eContents().get(2);
		private final RuleCall cLinkrefsLinkRefParserRuleCall_4_2_0 = (RuleCall)cLinkrefsAssignment_4_2.eContents().get(0);
		
		//Robot:
		//	'Robot' name=ID
		//	'Topology' topologies+=Topology+ (link+=Link | joint+=Joint | linkrefs+=LinkRef)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'Robot' name=ID 'Topology' topologies+=Topology+ (link+=Link | joint+=Joint | linkrefs+=LinkRef)*
		public Group getGroup() { return cGroup; }
		
		//'Robot'
		public Keyword getRobotKeyword_0() { return cRobotKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'Topology'
		public Keyword getTopologyKeyword_2() { return cTopologyKeyword_2; }
		
		//topologies+=Topology+
		public Assignment getTopologiesAssignment_3() { return cTopologiesAssignment_3; }
		
		//Topology
		public RuleCall getTopologiesTopologyParserRuleCall_3_0() { return cTopologiesTopologyParserRuleCall_3_0; }
		
		//(link+=Link | joint+=Joint | linkrefs+=LinkRef)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//link+=Link
		public Assignment getLinkAssignment_4_0() { return cLinkAssignment_4_0; }
		
		//Link
		public RuleCall getLinkLinkParserRuleCall_4_0_0() { return cLinkLinkParserRuleCall_4_0_0; }
		
		//joint+=Joint
		public Assignment getJointAssignment_4_1() { return cJointAssignment_4_1; }
		
		//Joint
		public RuleCall getJointJointParserRuleCall_4_1_0() { return cJointJointParserRuleCall_4_1_0; }
		
		//linkrefs+=LinkRef
		public Assignment getLinkrefsAssignment_4_2() { return cLinkrefsAssignment_4_2; }
		
		//LinkRef
		public RuleCall getLinkrefsLinkRefParserRuleCall_4_2_0() { return cLinkrefsLinkRefParserRuleCall_4_2_0; }
	}
	public class TopologyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Topology");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cParentLinkCrossReference_0_0 = (CrossReference)cParentAssignment_0.eContents().get(0);
		private final RuleCall cParentLinkIDTerminalRuleCall_0_0_1 = (RuleCall)cParentLinkCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cJointAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cJointJointRefParserRuleCall_1_0_0 = (RuleCall)cJointAssignment_1_0.eContents().get(0);
		private final Assignment cChildAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cChildTopologyParserRuleCall_1_1_0 = (RuleCall)cChildAssignment_1_1.eContents().get(0);
		
		//Topology:
		//	parent=[Link] (joint=JointRef child=Topology)?;
		@Override public ParserRule getRule() { return rule; }
		
		//parent=[Link] (joint=JointRef child=Topology)?
		public Group getGroup() { return cGroup; }
		
		//parent=[Link]
		public Assignment getParentAssignment_0() { return cParentAssignment_0; }
		
		//[Link]
		public CrossReference getParentLinkCrossReference_0_0() { return cParentLinkCrossReference_0_0; }
		
		//ID
		public RuleCall getParentLinkIDTerminalRuleCall_0_0_1() { return cParentLinkIDTerminalRuleCall_0_0_1; }
		
		//(joint=JointRef child=Topology)?
		public Group getGroup_1() { return cGroup_1; }
		
		//joint=JointRef
		public Assignment getJointAssignment_1_0() { return cJointAssignment_1_0; }
		
		//JointRef
		public RuleCall getJointJointRefParserRuleCall_1_0_0() { return cJointJointRefParserRuleCall_1_0_0; }
		
		//child=Topology
		public Assignment getChildAssignment_1_1() { return cChildAssignment_1_1; }
		
		//Topology
		public RuleCall getChildTopologyParserRuleCall_1_1_0() { return cChildTopologyParserRuleCall_1_1_0; }
	}
	public class LinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Link");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLinkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cIsReuseOfKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cIsReuseOfAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cIsReuseOfLinkCrossReference_2_1_0 = (CrossReference)cIsReuseOfAssignment_2_1.eContents().get(0);
		private final RuleCall cIsReuseOfLinkIDTerminalRuleCall_2_1_0_1 = (RuleCall)cIsReuseOfLinkCrossReference_2_1_0.eContents().get(1);
		private final Assignment cDecoratorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDecoratorLinkDecoratorParserRuleCall_3_0 = (RuleCall)cDecoratorAssignment_3.eContents().get(0);
		
		//Link:
		//	'Link' name=ID ('isReuseOf' isReuseOf=[Link])?
		//	decorator=LinkDecorator;
		@Override public ParserRule getRule() { return rule; }
		
		//'Link' name=ID ('isReuseOf' isReuseOf=[Link])? decorator=LinkDecorator
		public Group getGroup() { return cGroup; }
		
		//'Link'
		public Keyword getLinkKeyword_0() { return cLinkKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('isReuseOf' isReuseOf=[Link])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'isReuseOf'
		public Keyword getIsReuseOfKeyword_2_0() { return cIsReuseOfKeyword_2_0; }
		
		//isReuseOf=[Link]
		public Assignment getIsReuseOfAssignment_2_1() { return cIsReuseOfAssignment_2_1; }
		
		//[Link]
		public CrossReference getIsReuseOfLinkCrossReference_2_1_0() { return cIsReuseOfLinkCrossReference_2_1_0; }
		
		//ID
		public RuleCall getIsReuseOfLinkIDTerminalRuleCall_2_1_0_1() { return cIsReuseOfLinkIDTerminalRuleCall_2_1_0_1; }
		
		//decorator=LinkDecorator
		public Assignment getDecoratorAssignment_3() { return cDecoratorAssignment_3; }
		
		//LinkDecorator
		public RuleCall getDecoratorLinkDecoratorParserRuleCall_3_0() { return cDecoratorLinkDecoratorParserRuleCall_3_0; }
	}
	public class LinkDecoratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.LinkDecorator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLinkDecoratorAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cInertAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInertInertiaParserRuleCall_1_0 = (RuleCall)cInertAssignment_1.eContents().get(0);
		
		//LinkDecorator:
		//	{LinkDecorator} inert+=Inertia*;
		@Override public ParserRule getRule() { return rule; }
		
		//{LinkDecorator} inert+=Inertia*
		public Group getGroup() { return cGroup; }
		
		//{LinkDecorator}
		public Action getLinkDecoratorAction_0() { return cLinkDecoratorAction_0; }
		
		//inert+=Inertia*
		public Assignment getInertAssignment_1() { return cInertAssignment_1; }
		
		//Inertia
		public RuleCall getInertInertiaParserRuleCall_1_0() { return cInertInertiaParserRuleCall_1_0; }
	}
	public class LinkRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.LinkRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAdd_toKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefLinkCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefLinkIDTerminalRuleCall_1_0_1 = (RuleCall)cRefLinkCrossReference_1_0.eContents().get(1);
		private final Assignment cDecoratorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cDecoratorLinkDecoratorCrossReference_2_0 = (CrossReference)cDecoratorAssignment_2.eContents().get(0);
		private final RuleCall cDecoratorLinkDecoratorIDTerminalRuleCall_2_0_1 = (RuleCall)cDecoratorLinkDecoratorCrossReference_2_0.eContents().get(1);
		
		//LinkRef:
		//	'add_to' ref=[Link] decorator=[LinkDecorator];
		@Override public ParserRule getRule() { return rule; }
		
		//'add_to' ref=[Link] decorator=[LinkDecorator]
		public Group getGroup() { return cGroup; }
		
		//'add_to'
		public Keyword getAdd_toKeyword_0() { return cAdd_toKeyword_0; }
		
		//ref=[Link]
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }
		
		//[Link]
		public CrossReference getRefLinkCrossReference_1_0() { return cRefLinkCrossReference_1_0; }
		
		//ID
		public RuleCall getRefLinkIDTerminalRuleCall_1_0_1() { return cRefLinkIDTerminalRuleCall_1_0_1; }
		
		//decorator=[LinkDecorator]
		public Assignment getDecoratorAssignment_2() { return cDecoratorAssignment_2; }
		
		//[LinkDecorator]
		public CrossReference getDecoratorLinkDecoratorCrossReference_2_0() { return cDecoratorLinkDecoratorCrossReference_2_0; }
		
		//ID
		public RuleCall getDecoratorLinkDecoratorIDTerminalRuleCall_2_0_1() { return cDecoratorLinkDecoratorIDTerminalRuleCall_2_0_1; }
	}
	public class JointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Joint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJointKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cIsReuseOfKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cIsReuseOfAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cIsReuseOfJointCrossReference_2_1_0 = (CrossReference)cIsReuseOfAssignment_2_1.eContents().get(0);
		private final RuleCall cIsReuseOfJointIDTerminalRuleCall_2_1_0_1 = (RuleCall)cIsReuseOfJointCrossReference_2_1_0.eContents().get(1);
		private final Keyword cChildOfKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cChildOfAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cChildOfLinkCrossReference_4_0 = (CrossReference)cChildOfAssignment_4.eContents().get(0);
		private final RuleCall cChildOfLinkIDTerminalRuleCall_4_0_1 = (RuleCall)cChildOfLinkCrossReference_4_0.eContents().get(1);
		private final Keyword cParentOfKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cParentOfAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cParentOfLinkCrossReference_6_0 = (CrossReference)cParentOfAssignment_6.eContents().get(0);
		private final RuleCall cParentOfLinkIDTerminalRuleCall_6_0_1 = (RuleCall)cParentOfLinkCrossReference_6_0.eContents().get(1);
		private final Keyword cTypeKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cTypeAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cTypeJointTypeEnumRuleCall_8_0 = (RuleCall)cTypeAssignment_8.eContents().get(0);
		
		//Joint:
		//	'Joint' name=ID ('isReuseOf' isReuseOf=[Joint])?
		//	'ChildOf' ChildOf=[Link]
		//	'ParentOf' ParentOf=[Link]
		//	'Type' Type=JointType;
		@Override public ParserRule getRule() { return rule; }
		
		//'Joint' name=ID ('isReuseOf' isReuseOf=[Joint])? 'ChildOf' ChildOf=[Link] 'ParentOf' ParentOf=[Link] 'Type'
		//Type=JointType
		public Group getGroup() { return cGroup; }
		
		//'Joint'
		public Keyword getJointKeyword_0() { return cJointKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('isReuseOf' isReuseOf=[Joint])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'isReuseOf'
		public Keyword getIsReuseOfKeyword_2_0() { return cIsReuseOfKeyword_2_0; }
		
		//isReuseOf=[Joint]
		public Assignment getIsReuseOfAssignment_2_1() { return cIsReuseOfAssignment_2_1; }
		
		//[Joint]
		public CrossReference getIsReuseOfJointCrossReference_2_1_0() { return cIsReuseOfJointCrossReference_2_1_0; }
		
		//ID
		public RuleCall getIsReuseOfJointIDTerminalRuleCall_2_1_0_1() { return cIsReuseOfJointIDTerminalRuleCall_2_1_0_1; }
		
		//'ChildOf'
		public Keyword getChildOfKeyword_3() { return cChildOfKeyword_3; }
		
		//ChildOf=[Link]
		public Assignment getChildOfAssignment_4() { return cChildOfAssignment_4; }
		
		//[Link]
		public CrossReference getChildOfLinkCrossReference_4_0() { return cChildOfLinkCrossReference_4_0; }
		
		//ID
		public RuleCall getChildOfLinkIDTerminalRuleCall_4_0_1() { return cChildOfLinkIDTerminalRuleCall_4_0_1; }
		
		//'ParentOf'
		public Keyword getParentOfKeyword_5() { return cParentOfKeyword_5; }
		
		//ParentOf=[Link]
		public Assignment getParentOfAssignment_6() { return cParentOfAssignment_6; }
		
		//[Link]
		public CrossReference getParentOfLinkCrossReference_6_0() { return cParentOfLinkCrossReference_6_0; }
		
		//ID
		public RuleCall getParentOfLinkIDTerminalRuleCall_6_0_1() { return cParentOfLinkIDTerminalRuleCall_6_0_1; }
		
		//'Type'
		public Keyword getTypeKeyword_7() { return cTypeKeyword_7; }
		
		//Type=JointType
		public Assignment getTypeAssignment_8() { return cTypeAssignment_8; }
		
		//JointType
		public RuleCall getTypeJointTypeEnumRuleCall_8_0() { return cTypeJointTypeEnumRuleCall_8_0; }
	}
	public class JointRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.JointRef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cFixAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cFixHyphenMinusGreaterThanSignKeyword_0_0 = (Keyword)cFixAssignment_0.eContents().get(0);
		private final Assignment cRevAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cRevRKeyword_1_0 = (Keyword)cRevAssignment_1.eContents().get(0);
		private final Assignment cPrisAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cPrisPKeyword_2_0 = (Keyword)cPrisAssignment_2.eContents().get(0);
		private final Assignment cContAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cContCKeyword_3_0 = (Keyword)cContAssignment_3.eContents().get(0);
		
		//JointRef:
		//	fix='->' | rev='r->' | pris='p->' | cont='c->';
		@Override public ParserRule getRule() { return rule; }
		
		//fix='->' | rev='r->' | pris='p->' | cont='c->'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//fix='->'
		public Assignment getFixAssignment_0() { return cFixAssignment_0; }
		
		//'->'
		public Keyword getFixHyphenMinusGreaterThanSignKeyword_0_0() { return cFixHyphenMinusGreaterThanSignKeyword_0_0; }
		
		//rev='r->'
		public Assignment getRevAssignment_1() { return cRevAssignment_1; }
		
		//'r->'
		public Keyword getRevRKeyword_1_0() { return cRevRKeyword_1_0; }
		
		//pris='p->'
		public Assignment getPrisAssignment_2() { return cPrisAssignment_2; }
		
		//'p->'
		public Keyword getPrisPKeyword_2_0() { return cPrisPKeyword_2_0; }
		
		//cont='c->'
		public Assignment getContAssignment_3() { return cContAssignment_3; }
		
		//'c->'
		public Keyword getContCKeyword_3_0() { return cContCKeyword_3_0; }
	}
	public class InertialElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Inertial");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInertialKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cInertiaAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInertiaInertiaParserRuleCall_2_0 = (RuleCall)cInertiaAssignment_2.eContents().get(0);
		private final Assignment cMassAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMassMassParserRuleCall_3_0 = (RuleCall)cMassAssignment_3.eContents().get(0);
		private final Assignment cOriginAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOriginOriginParserRuleCall_4_0 = (RuleCall)cOriginAssignment_4.eContents().get(0);
		
		//Inertial:
		//	'Inertial' name=ID?
		//	inertia=Inertia
		//	mass=Mass
		//	origin=Origin?;
		@Override public ParserRule getRule() { return rule; }
		
		//'Inertial' name=ID? inertia=Inertia mass=Mass origin=Origin?
		public Group getGroup() { return cGroup; }
		
		//'Inertial'
		public Keyword getInertialKeyword_0() { return cInertialKeyword_0; }
		
		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//inertia=Inertia
		public Assignment getInertiaAssignment_2() { return cInertiaAssignment_2; }
		
		//Inertia
		public RuleCall getInertiaInertiaParserRuleCall_2_0() { return cInertiaInertiaParserRuleCall_2_0; }
		
		//mass=Mass
		public Assignment getMassAssignment_3() { return cMassAssignment_3; }
		
		//Mass
		public RuleCall getMassMassParserRuleCall_3_0() { return cMassMassParserRuleCall_3_0; }
		
		//origin=Origin?
		public Assignment getOriginAssignment_4() { return cOriginAssignment_4; }
		
		//Origin
		public RuleCall getOriginOriginParserRuleCall_4_0() { return cOriginOriginParserRuleCall_4_0; }
	}
	public class InertiaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Inertia");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInertiaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cIxxKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIxxAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIxxINTTerminalRuleCall_3_0 = (RuleCall)cIxxAssignment_3.eContents().get(0);
		private final Keyword cIxyKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cIxyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cIxyINTTerminalRuleCall_5_0 = (RuleCall)cIxyAssignment_5.eContents().get(0);
		private final Keyword cIxzKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cIxzAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cIxzINTTerminalRuleCall_7_0 = (RuleCall)cIxzAssignment_7.eContents().get(0);
		private final Keyword cIyyKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cIyyAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cIyyINTTerminalRuleCall_9_0 = (RuleCall)cIyyAssignment_9.eContents().get(0);
		private final Keyword cIyzKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cIyzAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cIyzINTTerminalRuleCall_11_0 = (RuleCall)cIyzAssignment_11.eContents().get(0);
		private final Keyword cIzzKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Assignment cIzzAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cIzzINTTerminalRuleCall_13_0 = (RuleCall)cIzzAssignment_13.eContents().get(0);
		
		//Inertia:
		//	'Inertia' name=ID?
		//	'ixx' ixx=INT 'ixy' ixy=INT 'ixz' ixz=INT 'iyy' iyy=INT 'iyz' iyz=INT 'izz' izz=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'Inertia' name=ID? 'ixx' ixx=INT 'ixy' ixy=INT 'ixz' ixz=INT 'iyy' iyy=INT 'iyz' iyz=INT 'izz' izz=INT
		public Group getGroup() { return cGroup; }
		
		//'Inertia'
		public Keyword getInertiaKeyword_0() { return cInertiaKeyword_0; }
		
		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'ixx'
		public Keyword getIxxKeyword_2() { return cIxxKeyword_2; }
		
		//ixx=INT
		public Assignment getIxxAssignment_3() { return cIxxAssignment_3; }
		
		//INT
		public RuleCall getIxxINTTerminalRuleCall_3_0() { return cIxxINTTerminalRuleCall_3_0; }
		
		//'ixy'
		public Keyword getIxyKeyword_4() { return cIxyKeyword_4; }
		
		//ixy=INT
		public Assignment getIxyAssignment_5() { return cIxyAssignment_5; }
		
		//INT
		public RuleCall getIxyINTTerminalRuleCall_5_0() { return cIxyINTTerminalRuleCall_5_0; }
		
		//'ixz'
		public Keyword getIxzKeyword_6() { return cIxzKeyword_6; }
		
		//ixz=INT
		public Assignment getIxzAssignment_7() { return cIxzAssignment_7; }
		
		//INT
		public RuleCall getIxzINTTerminalRuleCall_7_0() { return cIxzINTTerminalRuleCall_7_0; }
		
		//'iyy'
		public Keyword getIyyKeyword_8() { return cIyyKeyword_8; }
		
		//iyy=INT
		public Assignment getIyyAssignment_9() { return cIyyAssignment_9; }
		
		//INT
		public RuleCall getIyyINTTerminalRuleCall_9_0() { return cIyyINTTerminalRuleCall_9_0; }
		
		//'iyz'
		public Keyword getIyzKeyword_10() { return cIyzKeyword_10; }
		
		//iyz=INT
		public Assignment getIyzAssignment_11() { return cIyzAssignment_11; }
		
		//INT
		public RuleCall getIyzINTTerminalRuleCall_11_0() { return cIyzINTTerminalRuleCall_11_0; }
		
		//'izz'
		public Keyword getIzzKeyword_12() { return cIzzKeyword_12; }
		
		//izz=INT
		public Assignment getIzzAssignment_13() { return cIzzAssignment_13; }
		
		//INT
		public RuleCall getIzzINTTerminalRuleCall_13_0() { return cIzzINTTerminalRuleCall_13_0; }
	}
	public class VisualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Visual");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVisualKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cOriginAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOriginOriginParserRuleCall_2_0 = (RuleCall)cOriginAssignment_2.eContents().get(0);
		
		//Visual:
		//	'Visual' name=ID?
		//	origin=Origin?;
		@Override public ParserRule getRule() { return rule; }
		
		//'Visual' name=ID? origin=Origin?
		public Group getGroup() { return cGroup; }
		
		//'Visual'
		public Keyword getVisualKeyword_0() { return cVisualKeyword_0; }
		
		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//origin=Origin?
		public Assignment getOriginAssignment_2() { return cOriginAssignment_2; }
		
		//Origin
		public RuleCall getOriginOriginParserRuleCall_2_0() { return cOriginOriginParserRuleCall_2_0; }
	}
	public class CollisionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Collision");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCollisionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cOriginKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOriginAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOriginOriginParserRuleCall_2_1_0 = (RuleCall)cOriginAssignment_2_1.eContents().get(0);
		
		//Collision:
		//	'Collision' name=ID ('Origin' origin=Origin)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'Collision' name=ID ('Origin' origin=Origin)?
		public Group getGroup() { return cGroup; }
		
		//'Collision'
		public Keyword getCollisionKeyword_0() { return cCollisionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('Origin' origin=Origin)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'Origin'
		public Keyword getOriginKeyword_2_0() { return cOriginKeyword_2_0; }
		
		//origin=Origin
		public Assignment getOriginAssignment_2_1() { return cOriginAssignment_2_1; }
		
		//Origin
		public RuleCall getOriginOriginParserRuleCall_2_1_0() { return cOriginOriginParserRuleCall_2_1_0; }
	}
	public class OriginElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Origin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOriginKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cXyzKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cXAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cXINTTerminalRuleCall_3_0 = (RuleCall)cXAssignment_3.eContents().get(0);
		private final Assignment cYAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cYINTTerminalRuleCall_4_0 = (RuleCall)cYAssignment_4.eContents().get(0);
		private final Assignment cZAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cZINTTerminalRuleCall_5_0 = (RuleCall)cZAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cRoll_pitch_yawKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cRollAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cRollINTTerminalRuleCall_6_1_0 = (RuleCall)cRollAssignment_6_1.eContents().get(0);
		private final Assignment cPitchAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cPitchINTTerminalRuleCall_6_2_0 = (RuleCall)cPitchAssignment_6_2.eContents().get(0);
		private final Assignment cYawAssignment_6_3 = (Assignment)cGroup_6.eContents().get(3);
		private final RuleCall cYawINTTerminalRuleCall_6_3_0 = (RuleCall)cYawAssignment_6_3.eContents().get(0);
		
		//Origin:
		//	'Origin' name=ID?
		//	'xyz' x=INT y=INT z=INT ('roll_pitch_yaw' roll=INT pitch=INT yaw=INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'Origin' name=ID? 'xyz' x=INT y=INT z=INT ('roll_pitch_yaw' roll=INT pitch=INT yaw=INT)?
		public Group getGroup() { return cGroup; }
		
		//'Origin'
		public Keyword getOriginKeyword_0() { return cOriginKeyword_0; }
		
		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'xyz'
		public Keyword getXyzKeyword_2() { return cXyzKeyword_2; }
		
		//x=INT
		public Assignment getXAssignment_3() { return cXAssignment_3; }
		
		//INT
		public RuleCall getXINTTerminalRuleCall_3_0() { return cXINTTerminalRuleCall_3_0; }
		
		//y=INT
		public Assignment getYAssignment_4() { return cYAssignment_4; }
		
		//INT
		public RuleCall getYINTTerminalRuleCall_4_0() { return cYINTTerminalRuleCall_4_0; }
		
		//z=INT
		public Assignment getZAssignment_5() { return cZAssignment_5; }
		
		//INT
		public RuleCall getZINTTerminalRuleCall_5_0() { return cZINTTerminalRuleCall_5_0; }
		
		//('roll_pitch_yaw' roll=INT pitch=INT yaw=INT)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'roll_pitch_yaw'
		public Keyword getRoll_pitch_yawKeyword_6_0() { return cRoll_pitch_yawKeyword_6_0; }
		
		//roll=INT
		public Assignment getRollAssignment_6_1() { return cRollAssignment_6_1; }
		
		//INT
		public RuleCall getRollINTTerminalRuleCall_6_1_0() { return cRollINTTerminalRuleCall_6_1_0; }
		
		//pitch=INT
		public Assignment getPitchAssignment_6_2() { return cPitchAssignment_6_2; }
		
		//INT
		public RuleCall getPitchINTTerminalRuleCall_6_2_0() { return cPitchINTTerminalRuleCall_6_2_0; }
		
		//yaw=INT
		public Assignment getYawAssignment_6_3() { return cYawAssignment_6_3; }
		
		//INT
		public RuleCall getYawINTTerminalRuleCall_6_3_0() { return cYawINTTerminalRuleCall_6_3_0; }
	}
	public class MassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Mass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cMassValueInKilogramsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMassValueInKilogramsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMassValueInKilogramsINTTerminalRuleCall_3_0 = (RuleCall)cMassValueInKilogramsAssignment_3.eContents().get(0);
		
		//Mass:
		//	'Mass' name=ID?
		//	'massValueInKilograms' massValueInKilograms=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'Mass' name=ID? 'massValueInKilograms' massValueInKilograms=INT
		public Group getGroup() { return cGroup; }
		
		//'Mass'
		public Keyword getMassKeyword_0() { return cMassKeyword_0; }
		
		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'massValueInKilograms'
		public Keyword getMassValueInKilogramsKeyword_2() { return cMassValueInKilogramsKeyword_2; }
		
		//massValueInKilograms=INT
		public Assignment getMassValueInKilogramsAssignment_3() { return cMassValueInKilogramsAssignment_3; }
		
		//INT
		public RuleCall getMassValueInKilogramsINTTerminalRuleCall_3_0() { return cMassValueInKilogramsINTTerminalRuleCall_3_0; }
	}
	
	public class JointTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.JointType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFixedEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFixedFixedKeyword_0_0 = (Keyword)cFixedEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRevoluteEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRevoluteRevoluteKeyword_1_0 = (Keyword)cRevoluteEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPrismaticEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPrismaticPrismaticKeyword_2_0 = (Keyword)cPrismaticEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cContinuousEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cContinuousContinuousKeyword_3_0 = (Keyword)cContinuousEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum JointType:
		//	fixed='Fixed' | revolute='Revolute' | prismatic='Prismatic' | continuous='Continuous';
		public EnumRule getRule() { return rule; }
		
		//fixed='Fixed' | revolute='Revolute' | prismatic='Prismatic' | continuous='Continuous'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//fixed='Fixed'
		public EnumLiteralDeclaration getFixedEnumLiteralDeclaration_0() { return cFixedEnumLiteralDeclaration_0; }
		
		//'Fixed'
		public Keyword getFixedFixedKeyword_0_0() { return cFixedFixedKeyword_0_0; }
		
		//revolute='Revolute'
		public EnumLiteralDeclaration getRevoluteEnumLiteralDeclaration_1() { return cRevoluteEnumLiteralDeclaration_1; }
		
		//'Revolute'
		public Keyword getRevoluteRevoluteKeyword_1_0() { return cRevoluteRevoluteKeyword_1_0; }
		
		//prismatic='Prismatic'
		public EnumLiteralDeclaration getPrismaticEnumLiteralDeclaration_2() { return cPrismaticEnumLiteralDeclaration_2; }
		
		//'Prismatic'
		public Keyword getPrismaticPrismaticKeyword_2_0() { return cPrismaticPrismaticKeyword_2_0; }
		
		//continuous='Continuous'
		public EnumLiteralDeclaration getContinuousEnumLiteralDeclaration_3() { return cContinuousEnumLiteralDeclaration_3; }
		
		//'Continuous'
		public Keyword getContinuousContinuousKeyword_3_0() { return cContinuousContinuousKeyword_3_0; }
	}
	
	private final RobotElements pRobot;
	private final TopologyElements pTopology;
	private final LinkElements pLink;
	private final LinkDecoratorElements pLinkDecorator;
	private final LinkRefElements pLinkRef;
	private final JointElements pJoint;
	private final JointTypeElements eJointType;
	private final JointRefElements pJointRef;
	private final InertialElements pInertial;
	private final InertiaElements pInertia;
	private final VisualElements pVisual;
	private final CollisionElements pCollision;
	private final OriginElements pOrigin;
	private final MassElements pMass;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRobot = new RobotElements();
		this.pTopology = new TopologyElements();
		this.pLink = new LinkElements();
		this.pLinkDecorator = new LinkDecoratorElements();
		this.pLinkRef = new LinkRefElements();
		this.pJoint = new JointElements();
		this.eJointType = new JointTypeElements();
		this.pJointRef = new JointRefElements();
		this.pInertial = new InertialElements();
		this.pInertia = new InertiaElements();
		this.pVisual = new VisualElements();
		this.pCollision = new CollisionElements();
		this.pOrigin = new OriginElements();
		this.pMass = new MassElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Robot:
	//	'Robot' name=ID
	//	'Topology' topologies+=Topology+ (link+=Link | joint+=Joint | linkrefs+=LinkRef)*;
	public RobotElements getRobotAccess() {
		return pRobot;
	}
	
	public ParserRule getRobotRule() {
		return getRobotAccess().getRule();
	}
	
	//Topology:
	//	parent=[Link] (joint=JointRef child=Topology)?;
	public TopologyElements getTopologyAccess() {
		return pTopology;
	}
	
	public ParserRule getTopologyRule() {
		return getTopologyAccess().getRule();
	}
	
	//Link:
	//	'Link' name=ID ('isReuseOf' isReuseOf=[Link])?
	//	decorator=LinkDecorator;
	public LinkElements getLinkAccess() {
		return pLink;
	}
	
	public ParserRule getLinkRule() {
		return getLinkAccess().getRule();
	}
	
	//LinkDecorator:
	//	{LinkDecorator} inert+=Inertia*;
	public LinkDecoratorElements getLinkDecoratorAccess() {
		return pLinkDecorator;
	}
	
	public ParserRule getLinkDecoratorRule() {
		return getLinkDecoratorAccess().getRule();
	}
	
	//LinkRef:
	//	'add_to' ref=[Link] decorator=[LinkDecorator];
	public LinkRefElements getLinkRefAccess() {
		return pLinkRef;
	}
	
	public ParserRule getLinkRefRule() {
		return getLinkRefAccess().getRule();
	}
	
	//Joint:
	//	'Joint' name=ID ('isReuseOf' isReuseOf=[Joint])?
	//	'ChildOf' ChildOf=[Link]
	//	'ParentOf' ParentOf=[Link]
	//	'Type' Type=JointType;
	public JointElements getJointAccess() {
		return pJoint;
	}
	
	public ParserRule getJointRule() {
		return getJointAccess().getRule();
	}
	
	//enum JointType:
	//	fixed='Fixed' | revolute='Revolute' | prismatic='Prismatic' | continuous='Continuous';
	public JointTypeElements getJointTypeAccess() {
		return eJointType;
	}
	
	public EnumRule getJointTypeRule() {
		return getJointTypeAccess().getRule();
	}
	
	//JointRef:
	//	fix='->' | rev='r->' | pris='p->' | cont='c->';
	public JointRefElements getJointRefAccess() {
		return pJointRef;
	}
	
	public ParserRule getJointRefRule() {
		return getJointRefAccess().getRule();
	}
	
	//Inertial:
	//	'Inertial' name=ID?
	//	inertia=Inertia
	//	mass=Mass
	//	origin=Origin?;
	public InertialElements getInertialAccess() {
		return pInertial;
	}
	
	public ParserRule getInertialRule() {
		return getInertialAccess().getRule();
	}
	
	//Inertia:
	//	'Inertia' name=ID?
	//	'ixx' ixx=INT 'ixy' ixy=INT 'ixz' ixz=INT 'iyy' iyy=INT 'iyz' iyz=INT 'izz' izz=INT;
	public InertiaElements getInertiaAccess() {
		return pInertia;
	}
	
	public ParserRule getInertiaRule() {
		return getInertiaAccess().getRule();
	}
	
	//Visual:
	//	'Visual' name=ID?
	//	origin=Origin?;
	public VisualElements getVisualAccess() {
		return pVisual;
	}
	
	public ParserRule getVisualRule() {
		return getVisualAccess().getRule();
	}
	
	//Collision:
	//	'Collision' name=ID ('Origin' origin=Origin)?;
	public CollisionElements getCollisionAccess() {
		return pCollision;
	}
	
	public ParserRule getCollisionRule() {
		return getCollisionAccess().getRule();
	}
	
	//Origin:
	//	'Origin' name=ID?
	//	'xyz' x=INT y=INT z=INT ('roll_pitch_yaw' roll=INT pitch=INT yaw=INT)?;
	public OriginElements getOriginAccess() {
		return pOrigin;
	}
	
	public ParserRule getOriginRule() {
		return getOriginAccess().getRule();
	}
	
	//Mass:
	//	'Mass' name=ID?
	//	'massValueInKilograms' massValueInKilograms=INT;
	public MassElements getMassAccess() {
		return pMass;
	}
	
	public ParserRule getMassRule() {
		return getMassAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
