/*
 * generated by Xtext 2.10.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;

    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Robot";
   	}

   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleRobot
entryRuleRobot returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRobotRule()); }
	iv_ruleRobot=ruleRobot
	{ $current=$iv_ruleRobot.current; }
	EOF;

// Rule Robot
ruleRobot returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Robot'
		{
			newLeafNode(otherlv_0, grammarAccess.getRobotAccess().getRobotKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getRobotAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRobotRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='Topology'
		{
			newLeafNode(otherlv_2, grammarAccess.getRobotAccess().getTopologyKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRobotAccess().getTopologiesTopologyParserRuleCall_3_0());
				}
				lv_topologies_3_0=ruleTopology
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRobotRule());
					}
					add(
						$current,
						"topologies",
						lv_topologies_3_0,
						"org.xtext.example.mydsl.MyDsl.Topology");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getRobotAccess().getLinkLinkParserRuleCall_4_0_0());
					}
					lv_link_4_0=ruleLink
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRobotRule());
						}
						add(
							$current,
							"link",
							lv_link_4_0,
							"org.xtext.example.mydsl.MyDsl.Link");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getRobotAccess().getJointJointParserRuleCall_4_1_0());
					}
					lv_joint_5_0=ruleJoint
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRobotRule());
						}
						add(
							$current,
							"joint",
							lv_joint_5_0,
							"org.xtext.example.mydsl.MyDsl.Joint");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getRobotAccess().getLinkrefsLinkRefParserRuleCall_4_2_0());
					}
					lv_linkrefs_6_0=ruleLinkRef
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRobotRule());
						}
						add(
							$current,
							"linkrefs",
							lv_linkrefs_6_0,
							"org.xtext.example.mydsl.MyDsl.LinkRef");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleTopology
entryRuleTopology returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTopologyRule()); }
	iv_ruleTopology=ruleTopology
	{ $current=$iv_ruleTopology.current; }
	EOF;

// Rule Topology
ruleTopology returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTopologyRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getTopologyAccess().getParentLinkCrossReference_0_0());
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getTopologyAccess().getJointJointRefParserRuleCall_1_0_0());
					}
					lv_joint_1_0=ruleJointRef
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTopologyRule());
						}
						set(
							$current,
							"joint",
							lv_joint_1_0,
							"org.xtext.example.mydsl.MyDsl.JointRef");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getTopologyAccess().getChildTopologyParserRuleCall_1_1_0());
					}
					lv_child_2_0=ruleTopology
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTopologyRule());
						}
						set(
							$current,
							"child",
							lv_child_2_0,
							"org.xtext.example.mydsl.MyDsl.Topology");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleLink
entryRuleLink returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLinkRule()); }
	iv_ruleLink=ruleLink
	{ $current=$iv_ruleLink.current; }
	EOF;

// Rule Link
ruleLink returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Link'
		{
			newLeafNode(otherlv_0, grammarAccess.getLinkAccess().getLinkKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getLinkAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLinkRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2='isReuseOf'
			{
				newLeafNode(otherlv_2, grammarAccess.getLinkAccess().getIsReuseOfKeyword_2_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLinkRule());
						}
					}
					otherlv_3=RULE_ID
					{
						newLeafNode(otherlv_3, grammarAccess.getLinkAccess().getIsReuseOfLinkCrossReference_2_1_0());
					}
				)
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getLinkAccess().getDecoratorLinkDecoratorParserRuleCall_3_0());
				}
				lv_decorator_4_0=ruleLinkDecorator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLinkRule());
					}
					set(
						$current,
						"decorator",
						lv_decorator_4_0,
						"org.xtext.example.mydsl.MyDsl.LinkDecorator");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleLinkDecorator
entryRuleLinkDecorator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLinkDecoratorRule()); }
	iv_ruleLinkDecorator=ruleLinkDecorator
	{ $current=$iv_ruleLinkDecorator.current; }
	EOF;

// Rule LinkDecorator
ruleLinkDecorator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getLinkDecoratorAccess().getLinkDecoratorAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getLinkDecoratorAccess().getInertInertiaParserRuleCall_1_0());
				}
				lv_inert_1_0=ruleInertia
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLinkDecoratorRule());
					}
					add(
						$current,
						"inert",
						lv_inert_1_0,
						"org.xtext.example.mydsl.MyDsl.Inertia");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleLinkRef
entryRuleLinkRef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLinkRefRule()); }
	iv_ruleLinkRef=ruleLinkRef
	{ $current=$iv_ruleLinkRef.current; }
	EOF;

// Rule LinkRef
ruleLinkRef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='add_to'
		{
			newLeafNode(otherlv_0, grammarAccess.getLinkRefAccess().getAdd_toKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLinkRefRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getLinkRefAccess().getRefLinkCrossReference_1_0());
				}
			)
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLinkRefRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getLinkRefAccess().getDecoratorLinkDecoratorCrossReference_2_0());
				}
			)
		)
	)
;

// Entry rule entryRuleJoint
entryRuleJoint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJointRule()); }
	iv_ruleJoint=ruleJoint
	{ $current=$iv_ruleJoint.current; }
	EOF;

// Rule Joint
ruleJoint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Joint'
		{
			newLeafNode(otherlv_0, grammarAccess.getJointAccess().getJointKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getJointAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJointRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2='isReuseOf'
			{
				newLeafNode(otherlv_2, grammarAccess.getJointAccess().getIsReuseOfKeyword_2_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getJointRule());
						}
					}
					otherlv_3=RULE_ID
					{
						newLeafNode(otherlv_3, grammarAccess.getJointAccess().getIsReuseOfJointCrossReference_2_1_0());
					}
				)
			)
		)?
		otherlv_4='ChildOf'
		{
			newLeafNode(otherlv_4, grammarAccess.getJointAccess().getChildOfKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJointRule());
					}
				}
				otherlv_5=RULE_ID
				{
					newLeafNode(otherlv_5, grammarAccess.getJointAccess().getChildOfLinkCrossReference_4_0());
				}
			)
		)
		otherlv_6='ParentOf'
		{
			newLeafNode(otherlv_6, grammarAccess.getJointAccess().getParentOfKeyword_5());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJointRule());
					}
				}
				otherlv_7=RULE_ID
				{
					newLeafNode(otherlv_7, grammarAccess.getJointAccess().getParentOfLinkCrossReference_6_0());
				}
			)
		)
		otherlv_8='Type'
		{
			newLeafNode(otherlv_8, grammarAccess.getJointAccess().getTypeKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getJointAccess().getTypeJointTypeEnumRuleCall_8_0());
				}
				lv_Type_9_0=ruleJointType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJointRule());
					}
					set(
						$current,
						"Type",
						lv_Type_9_0,
						"org.xtext.example.mydsl.MyDsl.JointType");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleJointRef
entryRuleJointRef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJointRefRule()); }
	iv_ruleJointRef=ruleJointRef
	{ $current=$iv_ruleJointRef.current; }
	EOF;

// Rule JointRef
ruleJointRef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_fix_0_0='->'
				{
					newLeafNode(lv_fix_0_0, grammarAccess.getJointRefAccess().getFixHyphenMinusGreaterThanSignKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJointRefRule());
					}
					setWithLastConsumed($current, "fix", lv_fix_0_0, "->");
				}
			)
		)
		    |
		(
			(
				lv_rev_1_0='r->'
				{
					newLeafNode(lv_rev_1_0, grammarAccess.getJointRefAccess().getRevRKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJointRefRule());
					}
					setWithLastConsumed($current, "rev", lv_rev_1_0, "r->");
				}
			)
		)
		    |
		(
			(
				lv_pris_2_0='p->'
				{
					newLeafNode(lv_pris_2_0, grammarAccess.getJointRefAccess().getPrisPKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJointRefRule());
					}
					setWithLastConsumed($current, "pris", lv_pris_2_0, "p->");
				}
			)
		)
		    |
		(
			(
				lv_cont_3_0='c->'
				{
					newLeafNode(lv_cont_3_0, grammarAccess.getJointRefAccess().getContCKeyword_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJointRefRule());
					}
					setWithLastConsumed($current, "cont", lv_cont_3_0, "c->");
				}
			)
		)
	)
;

// Entry rule entryRuleInertia
entryRuleInertia returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInertiaRule()); }
	iv_ruleInertia=ruleInertia
	{ $current=$iv_ruleInertia.current; }
	EOF;

// Rule Inertia
ruleInertia returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Inertia'
		{
			newLeafNode(otherlv_0, grammarAccess.getInertiaAccess().getInertiaKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getInertiaAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInertiaRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)?
		otherlv_2='ixx'
		{
			newLeafNode(otherlv_2, grammarAccess.getInertiaAccess().getIxxKeyword_2());
		}
		(
			(
				lv_ixx_3_0=RULE_INT
				{
					newLeafNode(lv_ixx_3_0, grammarAccess.getInertiaAccess().getIxxINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInertiaRule());
					}
					setWithLastConsumed(
						$current,
						"ixx",
						lv_ixx_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_4='ixy'
		{
			newLeafNode(otherlv_4, grammarAccess.getInertiaAccess().getIxyKeyword_4());
		}
		(
			(
				lv_ixy_5_0=RULE_INT
				{
					newLeafNode(lv_ixy_5_0, grammarAccess.getInertiaAccess().getIxyINTTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInertiaRule());
					}
					setWithLastConsumed(
						$current,
						"ixy",
						lv_ixy_5_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_6='ixz'
		{
			newLeafNode(otherlv_6, grammarAccess.getInertiaAccess().getIxzKeyword_6());
		}
		(
			(
				lv_ixz_7_0=RULE_INT
				{
					newLeafNode(lv_ixz_7_0, grammarAccess.getInertiaAccess().getIxzINTTerminalRuleCall_7_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInertiaRule());
					}
					setWithLastConsumed(
						$current,
						"ixz",
						lv_ixz_7_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_8='iyy'
		{
			newLeafNode(otherlv_8, grammarAccess.getInertiaAccess().getIyyKeyword_8());
		}
		(
			(
				lv_iyy_9_0=RULE_INT
				{
					newLeafNode(lv_iyy_9_0, grammarAccess.getInertiaAccess().getIyyINTTerminalRuleCall_9_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInertiaRule());
					}
					setWithLastConsumed(
						$current,
						"iyy",
						lv_iyy_9_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_10='iyz'
		{
			newLeafNode(otherlv_10, grammarAccess.getInertiaAccess().getIyzKeyword_10());
		}
		(
			(
				lv_iyz_11_0=RULE_INT
				{
					newLeafNode(lv_iyz_11_0, grammarAccess.getInertiaAccess().getIyzINTTerminalRuleCall_11_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInertiaRule());
					}
					setWithLastConsumed(
						$current,
						"iyz",
						lv_iyz_11_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_12='izz'
		{
			newLeafNode(otherlv_12, grammarAccess.getInertiaAccess().getIzzKeyword_12());
		}
		(
			(
				lv_izz_13_0=RULE_INT
				{
					newLeafNode(lv_izz_13_0, grammarAccess.getInertiaAccess().getIzzINTTerminalRuleCall_13_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInertiaRule());
					}
					setWithLastConsumed(
						$current,
						"izz",
						lv_izz_13_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleOrigin
entryRuleOrigin returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOriginRule()); }
	iv_ruleOrigin=ruleOrigin
	{ $current=$iv_ruleOrigin.current; }
	EOF;

// Rule Origin
ruleOrigin returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Origin'
		{
			newLeafNode(otherlv_0, grammarAccess.getOriginAccess().getOriginKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getOriginAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOriginRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)?
		otherlv_2='xyz'
		{
			newLeafNode(otherlv_2, grammarAccess.getOriginAccess().getXyzKeyword_2());
		}
		(
			(
				lv_x_3_0=RULE_INT
				{
					newLeafNode(lv_x_3_0, grammarAccess.getOriginAccess().getXINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOriginRule());
					}
					setWithLastConsumed(
						$current,
						"x",
						lv_x_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		(
			(
				lv_y_4_0=RULE_INT
				{
					newLeafNode(lv_y_4_0, grammarAccess.getOriginAccess().getYINTTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOriginRule());
					}
					setWithLastConsumed(
						$current,
						"y",
						lv_y_4_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		(
			(
				lv_z_5_0=RULE_INT
				{
					newLeafNode(lv_z_5_0, grammarAccess.getOriginAccess().getZINTTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOriginRule());
					}
					setWithLastConsumed(
						$current,
						"z",
						lv_z_5_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		(
			otherlv_6='roll_pitch_yaw'
			{
				newLeafNode(otherlv_6, grammarAccess.getOriginAccess().getRoll_pitch_yawKeyword_6_0());
			}
			(
				(
					lv_roll_7_0=RULE_INT
					{
						newLeafNode(lv_roll_7_0, grammarAccess.getOriginAccess().getRollINTTerminalRuleCall_6_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getOriginRule());
						}
						setWithLastConsumed(
							$current,
							"roll",
							lv_roll_7_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
			(
				(
					lv_pitch_8_0=RULE_INT
					{
						newLeafNode(lv_pitch_8_0, grammarAccess.getOriginAccess().getPitchINTTerminalRuleCall_6_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getOriginRule());
						}
						setWithLastConsumed(
							$current,
							"pitch",
							lv_pitch_8_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
			(
				(
					lv_yaw_9_0=RULE_INT
					{
						newLeafNode(lv_yaw_9_0, grammarAccess.getOriginAccess().getYawINTTerminalRuleCall_6_3_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getOriginRule());
						}
						setWithLastConsumed(
							$current,
							"yaw",
							lv_yaw_9_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleMass
entryRuleMass returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMassRule()); }
	iv_ruleMass=ruleMass
	{ $current=$iv_ruleMass.current; }
	EOF;

// Rule Mass
ruleMass returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Mass'
		{
			newLeafNode(otherlv_0, grammarAccess.getMassAccess().getMassKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getMassAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMassRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)?
		otherlv_2='massValueInKilograms'
		{
			newLeafNode(otherlv_2, grammarAccess.getMassAccess().getMassValueInKilogramsKeyword_2());
		}
		(
			(
				lv_massValueInKilograms_3_0=RULE_INT
				{
					newLeafNode(lv_massValueInKilograms_3_0, grammarAccess.getMassAccess().getMassValueInKilogramsINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMassRule());
					}
					setWithLastConsumed(
						$current,
						"massValueInKilograms",
						lv_massValueInKilograms_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Rule JointType
ruleJointType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='Fixed'
			{
				$current = grammarAccess.getJointTypeAccess().getFixedEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getJointTypeAccess().getFixedEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='Revolute'
			{
				$current = grammarAccess.getJointTypeAccess().getRevoluteEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getJointTypeAccess().getRevoluteEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='Prismatic'
			{
				$current = grammarAccess.getJointTypeAccess().getPrismaticEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getJointTypeAccess().getPrismaticEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='Continuous'
			{
				$current = grammarAccess.getJointTypeAccess().getContinuousEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getJointTypeAccess().getContinuousEnumLiteralDeclaration_3());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
