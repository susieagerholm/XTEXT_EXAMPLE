/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.myDsl.Collision;
import org.xtext.example.mydsl.myDsl.Inertia;
import org.xtext.example.mydsl.myDsl.Inertial;
import org.xtext.example.mydsl.myDsl.Joint;
import org.xtext.example.mydsl.myDsl.JointRef;
import org.xtext.example.mydsl.myDsl.Link;
import org.xtext.example.mydsl.myDsl.LinkDecorator;
import org.xtext.example.mydsl.myDsl.LinkRef;
import org.xtext.example.mydsl.myDsl.Mass;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.Origin;
import org.xtext.example.mydsl.myDsl.Robot;
import org.xtext.example.mydsl.myDsl.Topology;
import org.xtext.example.mydsl.myDsl.Visual;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyDslPackage.COLLISION:
				sequence_Collision(context, (Collision) semanticObject); 
				return; 
			case MyDslPackage.INERTIA:
				sequence_Inertia(context, (Inertia) semanticObject); 
				return; 
			case MyDslPackage.INERTIAL:
				sequence_Inertial(context, (Inertial) semanticObject); 
				return; 
			case MyDslPackage.JOINT:
				sequence_Joint(context, (Joint) semanticObject); 
				return; 
			case MyDslPackage.JOINT_REF:
				sequence_JointRef(context, (JointRef) semanticObject); 
				return; 
			case MyDslPackage.LINK:
				sequence_Link(context, (Link) semanticObject); 
				return; 
			case MyDslPackage.LINK_DECORATOR:
				sequence_LinkDecorator(context, (LinkDecorator) semanticObject); 
				return; 
			case MyDslPackage.LINK_REF:
				sequence_LinkRef(context, (LinkRef) semanticObject); 
				return; 
			case MyDslPackage.MASS:
				sequence_Mass(context, (Mass) semanticObject); 
				return; 
			case MyDslPackage.ORIGIN:
				sequence_Origin(context, (Origin) semanticObject); 
				return; 
			case MyDslPackage.ROBOT:
				sequence_Robot(context, (Robot) semanticObject); 
				return; 
			case MyDslPackage.TOPOLOGY:
				sequence_Topology(context, (Topology) semanticObject); 
				return; 
			case MyDslPackage.VISUAL:
				sequence_Visual(context, (Visual) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Collision returns Collision
	 *
	 * Constraint:
	 *     (name=ID origin=Origin?)
	 */
	protected void sequence_Collision(ISerializationContext context, Collision semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Inertia returns Inertia
	 *
	 * Constraint:
	 *     (
	 *         name=ID? 
	 *         ixx=INT 
	 *         ixy=INT 
	 *         ixz=INT 
	 *         iyy=INT 
	 *         iyz=INT 
	 *         izz=INT
	 *     )
	 */
	protected void sequence_Inertia(ISerializationContext context, Inertia semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Inertial returns Inertial
	 *
	 * Constraint:
	 *     (name=ID? inertia=Inertia mass=Mass origin=Origin?)
	 */
	protected void sequence_Inertial(ISerializationContext context, Inertial semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JointRef returns JointRef
	 *
	 * Constraint:
	 *     (fix='->' | rev='r->' | pris='p->' | cont='c->')
	 */
	protected void sequence_JointRef(ISerializationContext context, JointRef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Joint returns Joint
	 *
	 * Constraint:
	 *     (name=ID isReuseOf=[Joint|ID]? ChildOf=[Link|ID] ParentOf=[Link|ID] Type=JointType)
	 */
	protected void sequence_Joint(ISerializationContext context, Joint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LinkDecorator returns LinkDecorator
	 *
	 * Constraint:
	 *     inert+=Inertia*
	 */
	protected void sequence_LinkDecorator(ISerializationContext context, LinkDecorator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LinkRef returns LinkRef
	 *
	 * Constraint:
	 *     (ref=[Link|ID] decorator=[LinkDecorator|ID])
	 */
	protected void sequence_LinkRef(ISerializationContext context, LinkRef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.LINK_REF__REF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.LINK_REF__REF));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.LINK_REF__DECORATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.LINK_REF__DECORATOR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLinkRefAccess().getRefLinkIDTerminalRuleCall_1_0_1(), semanticObject.getRef());
		feeder.accept(grammarAccess.getLinkRefAccess().getDecoratorLinkDecoratorIDTerminalRuleCall_2_0_1(), semanticObject.getDecorator());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Link returns Link
	 *
	 * Constraint:
	 *     (name=ID isReuseOf=[Link|ID]? decorator=LinkDecorator)
	 */
	protected void sequence_Link(ISerializationContext context, Link semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Mass returns Mass
	 *
	 * Constraint:
	 *     (name=ID? massValueInKilograms=INT)
	 */
	protected void sequence_Mass(ISerializationContext context, Mass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Origin returns Origin
	 *
	 * Constraint:
	 *     (name=ID? x=INT y=INT z=INT (roll=INT pitch=INT yaw=INT)?)
	 */
	protected void sequence_Origin(ISerializationContext context, Origin semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Robot returns Robot
	 *
	 * Constraint:
	 *     (name=ID topologies+=Topology+ (link+=Link | joint+=Joint | linkrefs+=LinkRef)*)
	 */
	protected void sequence_Robot(ISerializationContext context, Robot semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Topology returns Topology
	 *
	 * Constraint:
	 *     (parent=[Link|ID] (joint=JointRef child=Topology)?)
	 */
	protected void sequence_Topology(ISerializationContext context, Topology semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Visual returns Visual
	 *
	 * Constraint:
	 *     ((name=ID origin=Origin) | origin=Origin)?
	 */
	protected void sequence_Visual(ISerializationContext context, Visual semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
