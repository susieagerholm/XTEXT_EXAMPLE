/*
 * generated by Xtext 2.10.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}
@parser::members {
	private MyDslGrammarAccess grammarAccess;

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getMethodsAssignment()); }
		(rule__Model__MethodsAssignment)*
		{ after(grammarAccess.getModelAccess().getMethodsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMethod
entryRuleMethod
:
{ before(grammarAccess.getMethodRule()); }
	 ruleMethod
{ after(grammarAccess.getMethodRule()); } 
	 EOF 
;

// Rule Method
ruleMethod 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMethodAccess().getGroup()); }
		(rule__Method__Group__0)
		{ after(grammarAccess.getMethodAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDefinitionBlock
entryRuleDefinitionBlock
:
{ before(grammarAccess.getDefinitionBlockRule()); }
	 ruleDefinitionBlock
{ after(grammarAccess.getDefinitionBlockRule()); } 
	 EOF 
;

// Rule DefinitionBlock
ruleDefinitionBlock 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDefinitionBlockAccess().getGroup()); }
		(rule__DefinitionBlock__Group__0)
		{ after(grammarAccess.getDefinitionBlockAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariableDefinition
entryRuleVariableDefinition
:
{ before(grammarAccess.getVariableDefinitionRule()); }
	 ruleVariableDefinition
{ after(grammarAccess.getVariableDefinitionRule()); } 
	 EOF 
;

// Rule VariableDefinition
ruleVariableDefinition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableDefinitionAccess().getNameAssignment()); }
		(rule__VariableDefinition__NameAssignment)
		{ after(grammarAccess.getVariableDefinitionAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group__0__Impl
	rule__Method__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getDefKeyword_0()); }
	'def'
	{ after(grammarAccess.getMethodAccess().getDefKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group__1__Impl
	rule__Method__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getNameAssignment_1()); }
	(rule__Method__NameAssignment_1)
	{ after(grammarAccess.getMethodAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group__2__Impl
	rule__Method__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getMethodAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group__3__Impl
	rule__Method__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getDefinitionBlocksAssignment_3()); }
	(rule__Method__DefinitionBlocksAssignment_3)*
	{ after(grammarAccess.getMethodAccess().getDefinitionBlocksAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getMethodAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DefinitionBlock__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DefinitionBlock__Group__0__Impl
	rule__DefinitionBlock__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DefinitionBlock__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionBlockAccess().getVariableDefinitionsAssignment_0()); }
	(rule__DefinitionBlock__VariableDefinitionsAssignment_0)
	{ after(grammarAccess.getDefinitionBlockAccess().getVariableDefinitionsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DefinitionBlock__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DefinitionBlock__Group__1__Impl
	rule__DefinitionBlock__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DefinitionBlock__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionBlockAccess().getGroup_1()); }
	(rule__DefinitionBlock__Group_1__0)*
	{ after(grammarAccess.getDefinitionBlockAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DefinitionBlock__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DefinitionBlock__Group__2__Impl
	rule__DefinitionBlock__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DefinitionBlock__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionBlockAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getDefinitionBlockAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DefinitionBlock__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DefinitionBlock__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DefinitionBlock__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionBlockAccess().getTypeAssignment_3()); }
	(rule__DefinitionBlock__TypeAssignment_3)
	{ after(grammarAccess.getDefinitionBlockAccess().getTypeAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DefinitionBlock__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DefinitionBlock__Group_1__0__Impl
	rule__DefinitionBlock__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DefinitionBlock__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionBlockAccess().getCommaKeyword_1_0()); }
	','
	{ after(grammarAccess.getDefinitionBlockAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DefinitionBlock__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DefinitionBlock__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DefinitionBlock__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionBlockAccess().getVariableDefinitionsAssignment_1_1()); }
	(rule__DefinitionBlock__VariableDefinitionsAssignment_1_1)
	{ after(grammarAccess.getDefinitionBlockAccess().getVariableDefinitionsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__MethodsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getMethodsMethodParserRuleCall_0()); }
		ruleMethod
		{ after(grammarAccess.getModelAccess().getMethodsMethodParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getMethodAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__DefinitionBlocksAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodAccess().getDefinitionBlocksDefinitionBlockParserRuleCall_3_0()); }
		ruleDefinitionBlock
		{ after(grammarAccess.getMethodAccess().getDefinitionBlocksDefinitionBlockParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DefinitionBlock__VariableDefinitionsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefinitionBlockAccess().getVariableDefinitionsVariableDefinitionParserRuleCall_0_0()); }
		ruleVariableDefinition
		{ after(grammarAccess.getDefinitionBlockAccess().getVariableDefinitionsVariableDefinitionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DefinitionBlock__VariableDefinitionsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefinitionBlockAccess().getVariableDefinitionsVariableDefinitionParserRuleCall_1_1_0()); }
		ruleVariableDefinition
		{ after(grammarAccess.getDefinitionBlockAccess().getVariableDefinitionsVariableDefinitionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DefinitionBlock__TypeAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefinitionBlockAccess().getTypeIDTerminalRuleCall_3_0()); }
		RULE_ID
		{ after(grammarAccess.getDefinitionBlockAccess().getTypeIDTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDefinition__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableDefinitionAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getVariableDefinitionAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
