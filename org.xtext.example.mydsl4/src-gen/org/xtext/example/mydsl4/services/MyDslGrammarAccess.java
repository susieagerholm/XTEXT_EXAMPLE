/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydsl4.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class RobotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl4.MyDsl.Robot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRobotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cTopologyKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTopologiesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTopologiesTopologyParserRuleCall_3_0 = (RuleCall)cTopologiesAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cLinkAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cLinkLinkParserRuleCall_4_0_0 = (RuleCall)cLinkAssignment_4_0.eContents().get(0);
		private final Assignment cJointAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cJointJointParserRuleCall_4_1_0 = (RuleCall)cJointAssignment_4_1.eContents().get(0);
		
		//Robot:
		//	'Robot' name=ID
		//	'Topology' topologies+=Topology+ (link+=Link | joint+=Joint)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'Robot' name=ID 'Topology' topologies+=Topology+ (link+=Link | joint+=Joint)*
		public Group getGroup() { return cGroup; }
		
		//'Robot'
		public Keyword getRobotKeyword_0() { return cRobotKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'Topology'
		public Keyword getTopologyKeyword_2() { return cTopologyKeyword_2; }
		
		//topologies+=Topology+
		public Assignment getTopologiesAssignment_3() { return cTopologiesAssignment_3; }
		
		//Topology
		public RuleCall getTopologiesTopologyParserRuleCall_3_0() { return cTopologiesTopologyParserRuleCall_3_0; }
		
		//(link+=Link | joint+=Joint)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//link+=Link
		public Assignment getLinkAssignment_4_0() { return cLinkAssignment_4_0; }
		
		//Link
		public RuleCall getLinkLinkParserRuleCall_4_0_0() { return cLinkLinkParserRuleCall_4_0_0; }
		
		//joint+=Joint
		public Assignment getJointAssignment_4_1() { return cJointAssignment_4_1; }
		
		//Joint
		public RuleCall getJointJointParserRuleCall_4_1_0() { return cJointJointParserRuleCall_4_1_0; }
	}
	public class TopologyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl4.MyDsl.Topology");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParentSTRINGTerminalRuleCall_0_0 = (RuleCall)cParentAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cJointAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cJointJointRefParserRuleCall_1_0_0 = (RuleCall)cJointAssignment_1_0.eContents().get(0);
		private final Assignment cChildAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cChildTopologyParserRuleCall_1_1_0 = (RuleCall)cChildAssignment_1_1.eContents().get(0);
		
		/// *Topology:   
		//	'Topology' parent=Ref (joint+=JointRef child+=Ref)+; * / //Topology:   
		////parent=Ref ('->' child+=Ref)?; 
		////Ref:   
		////	onDemand=STRING |
		////	{Link} linkRef=[Link] 	
		////;
		//Topology:
		//	parent=STRING (joint=JointRef child=Topology)?;
		@Override public ParserRule getRule() { return rule; }
		
		//parent=STRING (joint=JointRef child=Topology)?
		public Group getGroup() { return cGroup; }
		
		//parent=STRING
		public Assignment getParentAssignment_0() { return cParentAssignment_0; }
		
		//STRING
		public RuleCall getParentSTRINGTerminalRuleCall_0_0() { return cParentSTRINGTerminalRuleCall_0_0; }
		
		//(joint=JointRef child=Topology)?
		public Group getGroup_1() { return cGroup_1; }
		
		//joint=JointRef
		public Assignment getJointAssignment_1_0() { return cJointAssignment_1_0; }
		
		//JointRef
		public RuleCall getJointJointRefParserRuleCall_1_0_0() { return cJointJointRefParserRuleCall_1_0_0; }
		
		//child=Topology
		public Assignment getChildAssignment_1_1() { return cChildAssignment_1_1; }
		
		//Topology
		public RuleCall getChildTopologyParserRuleCall_1_1_0() { return cChildTopologyParserRuleCall_1_1_0; }
	}
	public class LinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl4.MyDsl.Link");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLinkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		////'robot' robot=[Robot|ID] parent=STRING (joint=JointRef child=Topology)?;
		//Link:
		//	'Link' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'Link' name=ID
		public Group getGroup() { return cGroup; }
		
		//'Link'
		public Keyword getLinkKeyword_0() { return cLinkKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class JointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl4.MyDsl.Joint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJointKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cTypeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeJointTypeEnumRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cChildOfKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cChildOfAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cChildOfLinkCrossReference_5_0 = (CrossReference)cChildOfAssignment_5.eContents().get(0);
		private final RuleCall cChildOfLinkIDTerminalRuleCall_5_0_1 = (RuleCall)cChildOfLinkCrossReference_5_0.eContents().get(1);
		private final Keyword cParentOfKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cParentOfAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cParentOfLinkCrossReference_7_0 = (CrossReference)cParentOfAssignment_7.eContents().get(0);
		private final RuleCall cParentOfLinkIDTerminalRuleCall_7_0_1 = (RuleCall)cParentOfLinkCrossReference_7_0.eContents().get(1);
		
		//Joint:
		//	'Joint' name=ID
		//	'Type' Type=JointType
		//	'ChildOf' ChildOf=[Link]
		//	'ParentOf' ParentOf=[Link];
		@Override public ParserRule getRule() { return rule; }
		
		//'Joint' name=ID 'Type' Type=JointType 'ChildOf' ChildOf=[Link] 'ParentOf' ParentOf=[Link]
		public Group getGroup() { return cGroup; }
		
		//'Joint'
		public Keyword getJointKeyword_0() { return cJointKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'Type'
		public Keyword getTypeKeyword_2() { return cTypeKeyword_2; }
		
		//Type=JointType
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//JointType
		public RuleCall getTypeJointTypeEnumRuleCall_3_0() { return cTypeJointTypeEnumRuleCall_3_0; }
		
		//'ChildOf'
		public Keyword getChildOfKeyword_4() { return cChildOfKeyword_4; }
		
		//ChildOf=[Link]
		public Assignment getChildOfAssignment_5() { return cChildOfAssignment_5; }
		
		//[Link]
		public CrossReference getChildOfLinkCrossReference_5_0() { return cChildOfLinkCrossReference_5_0; }
		
		//ID
		public RuleCall getChildOfLinkIDTerminalRuleCall_5_0_1() { return cChildOfLinkIDTerminalRuleCall_5_0_1; }
		
		//'ParentOf'
		public Keyword getParentOfKeyword_6() { return cParentOfKeyword_6; }
		
		//ParentOf=[Link]
		public Assignment getParentOfAssignment_7() { return cParentOfAssignment_7; }
		
		//[Link]
		public CrossReference getParentOfLinkCrossReference_7_0() { return cParentOfLinkCrossReference_7_0; }
		
		//ID
		public RuleCall getParentOfLinkIDTerminalRuleCall_7_0_1() { return cParentOfLinkIDTerminalRuleCall_7_0_1; }
	}
	public class JointRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl4.MyDsl.JointRef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cFixAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cFixHyphenMinusGreaterThanSignKeyword_0_0 = (Keyword)cFixAssignment_0.eContents().get(0);
		private final Assignment cRevAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cRevRKeyword_1_0 = (Keyword)cRevAssignment_1.eContents().get(0);
		private final Assignment cPrisAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cPrisPKeyword_2_0 = (Keyword)cPrisAssignment_2.eContents().get(0);
		private final Assignment cContAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cContCKeyword_3_0 = (Keyword)cContAssignment_3.eContents().get(0);
		
		//JointRef:
		//	fix='->' | rev='r->' | pris='p->' | cont='c->';
		@Override public ParserRule getRule() { return rule; }
		
		//fix='->' | rev='r->' | pris='p->' | cont='c->'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//fix='->'
		public Assignment getFixAssignment_0() { return cFixAssignment_0; }
		
		//'->'
		public Keyword getFixHyphenMinusGreaterThanSignKeyword_0_0() { return cFixHyphenMinusGreaterThanSignKeyword_0_0; }
		
		//rev='r->'
		public Assignment getRevAssignment_1() { return cRevAssignment_1; }
		
		//'r->'
		public Keyword getRevRKeyword_1_0() { return cRevRKeyword_1_0; }
		
		//pris='p->'
		public Assignment getPrisAssignment_2() { return cPrisAssignment_2; }
		
		//'p->'
		public Keyword getPrisPKeyword_2_0() { return cPrisPKeyword_2_0; }
		
		//cont='c->'
		public Assignment getContAssignment_3() { return cContAssignment_3; }
		
		//'c->'
		public Keyword getContCKeyword_3_0() { return cContCKeyword_3_0; }
	}
	
	public class JointTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl4.MyDsl.JointType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFixedEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFixedFixedKeyword_0_0 = (Keyword)cFixedEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRevoluteEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRevoluteRevoluteKeyword_1_0 = (Keyword)cRevoluteEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPrismaticEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPrismaticPrismaticKeyword_2_0 = (Keyword)cPrismaticEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cContinuousEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cContinuousContinuousKeyword_3_0 = (Keyword)cContinuousEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum JointType:
		//	fixed='Fixed' | revolute='Revolute' | prismatic='Prismatic' | continuous='Continuous';
		public EnumRule getRule() { return rule; }
		
		//fixed='Fixed' | revolute='Revolute' | prismatic='Prismatic' | continuous='Continuous'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//fixed='Fixed'
		public EnumLiteralDeclaration getFixedEnumLiteralDeclaration_0() { return cFixedEnumLiteralDeclaration_0; }
		
		//'Fixed'
		public Keyword getFixedFixedKeyword_0_0() { return cFixedFixedKeyword_0_0; }
		
		//revolute='Revolute'
		public EnumLiteralDeclaration getRevoluteEnumLiteralDeclaration_1() { return cRevoluteEnumLiteralDeclaration_1; }
		
		//'Revolute'
		public Keyword getRevoluteRevoluteKeyword_1_0() { return cRevoluteRevoluteKeyword_1_0; }
		
		//prismatic='Prismatic'
		public EnumLiteralDeclaration getPrismaticEnumLiteralDeclaration_2() { return cPrismaticEnumLiteralDeclaration_2; }
		
		//'Prismatic'
		public Keyword getPrismaticPrismaticKeyword_2_0() { return cPrismaticPrismaticKeyword_2_0; }
		
		//continuous='Continuous'
		public EnumLiteralDeclaration getContinuousEnumLiteralDeclaration_3() { return cContinuousEnumLiteralDeclaration_3; }
		
		//'Continuous'
		public Keyword getContinuousContinuousKeyword_3_0() { return cContinuousContinuousKeyword_3_0; }
	}
	
	private final RobotElements pRobot;
	private final TopologyElements pTopology;
	private final LinkElements pLink;
	private final JointElements pJoint;
	private final JointTypeElements eJointType;
	private final JointRefElements pJointRef;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRobot = new RobotElements();
		this.pTopology = new TopologyElements();
		this.pLink = new LinkElements();
		this.pJoint = new JointElements();
		this.eJointType = new JointTypeElements();
		this.pJointRef = new JointRefElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl4.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Robot:
	//	'Robot' name=ID
	//	'Topology' topologies+=Topology+ (link+=Link | joint+=Joint)*;
	public RobotElements getRobotAccess() {
		return pRobot;
	}
	
	public ParserRule getRobotRule() {
		return getRobotAccess().getRule();
	}
	
	/// *Topology:   
	//	'Topology' parent=Ref (joint+=JointRef child+=Ref)+; * / //Topology:   
	////parent=Ref ('->' child+=Ref)?; 
	////Ref:   
	////	onDemand=STRING |
	////	{Link} linkRef=[Link] 	
	////;
	//Topology:
	//	parent=STRING (joint=JointRef child=Topology)?;
	public TopologyElements getTopologyAccess() {
		return pTopology;
	}
	
	public ParserRule getTopologyRule() {
		return getTopologyAccess().getRule();
	}
	
	////'robot' robot=[Robot|ID] parent=STRING (joint=JointRef child=Topology)?;
	//Link:
	//	'Link' name=ID;
	public LinkElements getLinkAccess() {
		return pLink;
	}
	
	public ParserRule getLinkRule() {
		return getLinkAccess().getRule();
	}
	
	//Joint:
	//	'Joint' name=ID
	//	'Type' Type=JointType
	//	'ChildOf' ChildOf=[Link]
	//	'ParentOf' ParentOf=[Link];
	public JointElements getJointAccess() {
		return pJoint;
	}
	
	public ParserRule getJointRule() {
		return getJointAccess().getRule();
	}
	
	//enum JointType:
	//	fixed='Fixed' | revolute='Revolute' | prismatic='Prismatic' | continuous='Continuous';
	public JointTypeElements getJointTypeAccess() {
		return eJointType;
	}
	
	public EnumRule getJointTypeRule() {
		return getJointTypeAccess().getRule();
	}
	
	//JointRef:
	//	fix='->' | rev='r->' | pris='p->' | cont='c->';
	public JointRefElements getJointRefAccess() {
		return pJointRef;
	}
	
	public ParserRule getJointRefRule() {
		return getJointRefAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
