/*
 * generated by Xtext 2.10.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl4.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl4.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl4.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;

    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Robot";
   	}

   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleRobot
entryRuleRobot returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRobotRule()); }
	iv_ruleRobot=ruleRobot
	{ $current=$iv_ruleRobot.current; }
	EOF;

// Rule Robot
ruleRobot returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Robot'
		{
			newLeafNode(otherlv_0, grammarAccess.getRobotAccess().getRobotKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getRobotAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRobotRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='Topology'
		{
			newLeafNode(otherlv_2, grammarAccess.getRobotAccess().getTopologyKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRobotAccess().getTopologiesTopologyParserRuleCall_3_0());
				}
				lv_topologies_3_0=ruleTopology
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRobotRule());
					}
					add(
						$current,
						"topologies",
						lv_topologies_3_0,
						"org.xtext.example.mydsl4.MyDsl.Topology");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getRobotAccess().getLinkLinkParserRuleCall_4_0_0());
					}
					lv_link_4_0=ruleLink
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRobotRule());
						}
						add(
							$current,
							"link",
							lv_link_4_0,
							"org.xtext.example.mydsl4.MyDsl.Link");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getRobotAccess().getJointJointParserRuleCall_4_1_0());
					}
					lv_joint_5_0=ruleJoint
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRobotRule());
						}
						add(
							$current,
							"joint",
							lv_joint_5_0,
							"org.xtext.example.mydsl4.MyDsl.Joint");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleTopology
entryRuleTopology returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTopologyRule()); }
	iv_ruleTopology=ruleTopology
	{ $current=$iv_ruleTopology.current; }
	EOF;

// Rule Topology
ruleTopology returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_parent_0_0=RULE_STRING
				{
					newLeafNode(lv_parent_0_0, grammarAccess.getTopologyAccess().getParentSTRINGTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTopologyRule());
					}
					setWithLastConsumed(
						$current,
						"parent",
						lv_parent_0_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getTopologyAccess().getJointJointRefParserRuleCall_1_0_0());
					}
					lv_joint_1_0=ruleJointRef
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTopologyRule());
						}
						set(
							$current,
							"joint",
							lv_joint_1_0,
							"org.xtext.example.mydsl4.MyDsl.JointRef");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getTopologyAccess().getChildTopologyParserRuleCall_1_1_0());
					}
					lv_child_2_0=ruleTopology
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTopologyRule());
						}
						set(
							$current,
							"child",
							lv_child_2_0,
							"org.xtext.example.mydsl4.MyDsl.Topology");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleLink
entryRuleLink returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLinkRule()); }
	iv_ruleLink=ruleLink
	{ $current=$iv_ruleLink.current; }
	EOF;

// Rule Link
ruleLink returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Link'
		{
			newLeafNode(otherlv_0, grammarAccess.getLinkAccess().getLinkKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getLinkAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLinkRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleJoint
entryRuleJoint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJointRule()); }
	iv_ruleJoint=ruleJoint
	{ $current=$iv_ruleJoint.current; }
	EOF;

// Rule Joint
ruleJoint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Joint'
		{
			newLeafNode(otherlv_0, grammarAccess.getJointAccess().getJointKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getJointAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJointRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='Type'
		{
			newLeafNode(otherlv_2, grammarAccess.getJointAccess().getTypeKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getJointAccess().getTypeJointTypeEnumRuleCall_3_0());
				}
				lv_Type_3_0=ruleJointType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJointRule());
					}
					set(
						$current,
						"Type",
						lv_Type_3_0,
						"org.xtext.example.mydsl4.MyDsl.JointType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='ChildOf'
		{
			newLeafNode(otherlv_4, grammarAccess.getJointAccess().getChildOfKeyword_4());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJointRule());
					}
				}
				otherlv_5=RULE_ID
				{
					newLeafNode(otherlv_5, grammarAccess.getJointAccess().getChildOfLinkCrossReference_5_0());
				}
			)
		)
		otherlv_6='ParentOf'
		{
			newLeafNode(otherlv_6, grammarAccess.getJointAccess().getParentOfKeyword_6());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJointRule());
					}
				}
				otherlv_7=RULE_ID
				{
					newLeafNode(otherlv_7, grammarAccess.getJointAccess().getParentOfLinkCrossReference_7_0());
				}
			)
		)
	)
;

// Entry rule entryRuleJointRef
entryRuleJointRef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJointRefRule()); }
	iv_ruleJointRef=ruleJointRef
	{ $current=$iv_ruleJointRef.current; }
	EOF;

// Rule JointRef
ruleJointRef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_fix_0_0='->'
				{
					newLeafNode(lv_fix_0_0, grammarAccess.getJointRefAccess().getFixHyphenMinusGreaterThanSignKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJointRefRule());
					}
					setWithLastConsumed($current, "fix", lv_fix_0_0, "->");
				}
			)
		)
		    |
		(
			(
				lv_rev_1_0='r->'
				{
					newLeafNode(lv_rev_1_0, grammarAccess.getJointRefAccess().getRevRKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJointRefRule());
					}
					setWithLastConsumed($current, "rev", lv_rev_1_0, "r->");
				}
			)
		)
		    |
		(
			(
				lv_pris_2_0='p->'
				{
					newLeafNode(lv_pris_2_0, grammarAccess.getJointRefAccess().getPrisPKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJointRefRule());
					}
					setWithLastConsumed($current, "pris", lv_pris_2_0, "p->");
				}
			)
		)
		    |
		(
			(
				lv_cont_3_0='c->'
				{
					newLeafNode(lv_cont_3_0, grammarAccess.getJointRefAccess().getContCKeyword_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJointRefRule());
					}
					setWithLastConsumed($current, "cont", lv_cont_3_0, "c->");
				}
			)
		)
	)
;

// Rule JointType
ruleJointType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='Fixed'
			{
				$current = grammarAccess.getJointTypeAccess().getFixedEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getJointTypeAccess().getFixedEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='Revolute'
			{
				$current = grammarAccess.getJointTypeAccess().getRevoluteEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getJointTypeAccess().getRevoluteEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='Prismatic'
			{
				$current = grammarAccess.getJointTypeAccess().getPrismaticEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getJointTypeAccess().getPrismaticEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='Continuous'
			{
				$current = grammarAccess.getJointTypeAccess().getContinuousEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getJointTypeAccess().getContinuousEnumLiteralDeclaration_3());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
