/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydsl4.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl4.myDsl.Joint;
import org.xtext.example.mydsl4.myDsl.JointRef;
import org.xtext.example.mydsl4.myDsl.Link;
import org.xtext.example.mydsl4.myDsl.MyDslPackage;
import org.xtext.example.mydsl4.myDsl.Robot;
import org.xtext.example.mydsl4.myDsl.Topology;
import org.xtext.example.mydsl4.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyDslPackage.JOINT:
				sequence_Joint(context, (Joint) semanticObject); 
				return; 
			case MyDslPackage.JOINT_REF:
				sequence_JointRef(context, (JointRef) semanticObject); 
				return; 
			case MyDslPackage.LINK:
				sequence_Link(context, (Link) semanticObject); 
				return; 
			case MyDslPackage.ROBOT:
				sequence_Robot(context, (Robot) semanticObject); 
				return; 
			case MyDslPackage.TOPOLOGY:
				sequence_Topology(context, (Topology) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     JointRef returns JointRef
	 *
	 * Constraint:
	 *     (fix='->' | rev='r->' | pris='p->' | cont='c->')
	 */
	protected void sequence_JointRef(ISerializationContext context, JointRef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Joint returns Joint
	 *
	 * Constraint:
	 *     (name=ID Type=JointType ChildOf=[Link|ID] ParentOf=[Link|ID])
	 */
	protected void sequence_Joint(ISerializationContext context, Joint semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.JOINT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.JOINT__NAME));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.JOINT__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.JOINT__TYPE));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.JOINT__CHILD_OF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.JOINT__CHILD_OF));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.JOINT__PARENT_OF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.JOINT__PARENT_OF));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJointAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getJointAccess().getTypeJointTypeEnumRuleCall_3_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getJointAccess().getChildOfLinkIDTerminalRuleCall_5_0_1(), semanticObject.getChildOf());
		feeder.accept(grammarAccess.getJointAccess().getParentOfLinkIDTerminalRuleCall_7_0_1(), semanticObject.getParentOf());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Link returns Link
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Link(ISerializationContext context, Link semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.LINK__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.LINK__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLinkAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Robot returns Robot
	 *
	 * Constraint:
	 *     (name=ID topologies+=Topology+ (link+=Link | joint+=Joint)*)
	 */
	protected void sequence_Robot(ISerializationContext context, Robot semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Topology returns Topology
	 *
	 * Constraint:
	 *     (parent=STRING (joint=JointRef child=Topology)?)
	 */
	protected void sequence_Topology(ISerializationContext context, Topology semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
