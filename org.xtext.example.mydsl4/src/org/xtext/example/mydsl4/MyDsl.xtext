grammar org.xtext.example.mydsl4.MyDsl with org.eclipse.xtext.common.Terminals

generate myDsl "http://www.xtext.org/example/mydsl4/MyDsl"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Robot returns Robot:
	'Robot' name=ID
     'Topology' topologies+=Topology+
	 (link+=Link | joint+=Joint )*//| dec+=LinkDecorator)*	 
;


/*ReUse returns ReUse:
	ReUser 'is_reuse_of' isReuseOf=[ReUseAble] ( //validate type match between KEYWORD and type of reused 
		'(' assignments += ASSIGNMENT ( ',' assignments+= ASSIGNMENT)* ')' 
	)? 
;*/

//Only Link and Joint should be available as reuse in global scope
//Others can be reused from their context  -aka Visual from within link and so on...
ReUser returns ReUseAble: 
	( 'Link' | 'Joint' | 'Inertia' | 'Visual') ref=ID | reuser=[ReUseAble] 
;

ReUseAble:
	Link | Joint | Inertia | Visual
;

/*LinkDecorator:
	{LinkDecorator} (ref=[Link])? 
		inert+=Inertia*		
;*/

//Awaiting Dot Expression impl...
ASSIGNMENT:
	"hello_world"
;

Visual returns Visual:
	'Visual' name=ID 
;

Inertia returns Inertia:
	'Inertia'(name=ID)?
	'ixx' ixx=INT 'ixy' ixy=INT 'ixz' ixz=INT 'iyy' iyy=INT 'iyz' iyz=INT 'izz' izz=INT
;

Topology:
	parent=[Link|ID] (joint=JointRef child=Topology)?;  
	//'robot' robot=[Robot|ID] parent=STRING (joint=JointRef child=Topology)?;

Link returns Link:
	'Link' name=ID
	('isReuseOf' isReuseOf=[Link])?
	//dec = LinkDecorator
;

Joint returns Joint:
	'Joint' name=ID
  	('isReuseOf' isReuseOf=[Joint])?
	'ChildOf' ChildOf=[Link|ID]
	'ParentOf' ParentOf=[Link|ID]
	'Type' Type=JointType
;

enum JointType returns JointType:
		fixed = 'Fixed' |revolute = 'Revolute' |  prismatic = 'Prismatic' | continuous = 'Continuous';
		
JointRef returns JointRef:
	 fix = '->' | rev = 'r->' | pris = 'p->' | cont = 'c->'  
;		



