/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydsl.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.xtext.example.mydsl.ide.contentassist.antlr.internal.InternalMyDslParser;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {

	@Inject
	private MyDslGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalMyDslParser createParser() {
		InternalMyDslParser result = new InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getRobotAccess().getAlternatives_4(), "rule__Robot__Alternatives_4");
					put(grammarAccess.getJointRefAccess().getAlternatives(), "rule__JointRef__Alternatives");
					put(grammarAccess.getJointTypeAccess().getAlternatives(), "rule__JointType__Alternatives");
					put(grammarAccess.getRobotAccess().getGroup(), "rule__Robot__Group__0");
					put(grammarAccess.getTopologyAccess().getGroup(), "rule__Topology__Group__0");
					put(grammarAccess.getTopologyAccess().getGroup_1(), "rule__Topology__Group_1__0");
					put(grammarAccess.getLinkAccess().getGroup(), "rule__Link__Group__0");
					put(grammarAccess.getLinkAccess().getGroup_2(), "rule__Link__Group_2__0");
					put(grammarAccess.getLinkDecoratorAccess().getGroup(), "rule__LinkDecorator__Group__0");
					put(grammarAccess.getLinkRefAccess().getGroup(), "rule__LinkRef__Group__0");
					put(grammarAccess.getJointAccess().getGroup(), "rule__Joint__Group__0");
					put(grammarAccess.getJointAccess().getGroup_2(), "rule__Joint__Group_2__0");
					put(grammarAccess.getInertialAccess().getGroup(), "rule__Inertial__Group__0");
					put(grammarAccess.getInertiaAccess().getGroup(), "rule__Inertia__Group__0");
					put(grammarAccess.getVisualAccess().getGroup(), "rule__Visual__Group__0");
					put(grammarAccess.getCollisionAccess().getGroup(), "rule__Collision__Group__0");
					put(grammarAccess.getCollisionAccess().getGroup_2(), "rule__Collision__Group_2__0");
					put(grammarAccess.getOriginAccess().getGroup(), "rule__Origin__Group__0");
					put(grammarAccess.getOriginAccess().getGroup_6(), "rule__Origin__Group_6__0");
					put(grammarAccess.getMassAccess().getGroup(), "rule__Mass__Group__0");
					put(grammarAccess.getRobotAccess().getNameAssignment_1(), "rule__Robot__NameAssignment_1");
					put(grammarAccess.getRobotAccess().getTopologiesAssignment_3(), "rule__Robot__TopologiesAssignment_3");
					put(grammarAccess.getRobotAccess().getLinkAssignment_4_0(), "rule__Robot__LinkAssignment_4_0");
					put(grammarAccess.getRobotAccess().getJointAssignment_4_1(), "rule__Robot__JointAssignment_4_1");
					put(grammarAccess.getRobotAccess().getLinkrefsAssignment_4_2(), "rule__Robot__LinkrefsAssignment_4_2");
					put(grammarAccess.getTopologyAccess().getParentAssignment_0(), "rule__Topology__ParentAssignment_0");
					put(grammarAccess.getTopologyAccess().getJointAssignment_1_0(), "rule__Topology__JointAssignment_1_0");
					put(grammarAccess.getTopologyAccess().getChildAssignment_1_1(), "rule__Topology__ChildAssignment_1_1");
					put(grammarAccess.getLinkAccess().getNameAssignment_1(), "rule__Link__NameAssignment_1");
					put(grammarAccess.getLinkAccess().getIsReuseOfAssignment_2_1(), "rule__Link__IsReuseOfAssignment_2_1");
					put(grammarAccess.getLinkAccess().getDecoratorAssignment_3(), "rule__Link__DecoratorAssignment_3");
					put(grammarAccess.getLinkDecoratorAccess().getInertAssignment_1(), "rule__LinkDecorator__InertAssignment_1");
					put(grammarAccess.getLinkRefAccess().getRefAssignment_1(), "rule__LinkRef__RefAssignment_1");
					put(grammarAccess.getLinkRefAccess().getDecoratorAssignment_2(), "rule__LinkRef__DecoratorAssignment_2");
					put(grammarAccess.getJointAccess().getNameAssignment_1(), "rule__Joint__NameAssignment_1");
					put(grammarAccess.getJointAccess().getIsReuseOfAssignment_2_1(), "rule__Joint__IsReuseOfAssignment_2_1");
					put(grammarAccess.getJointAccess().getChildOfAssignment_4(), "rule__Joint__ChildOfAssignment_4");
					put(grammarAccess.getJointAccess().getParentOfAssignment_6(), "rule__Joint__ParentOfAssignment_6");
					put(grammarAccess.getJointAccess().getTypeAssignment_8(), "rule__Joint__TypeAssignment_8");
					put(grammarAccess.getJointRefAccess().getFixAssignment_0(), "rule__JointRef__FixAssignment_0");
					put(grammarAccess.getJointRefAccess().getRevAssignment_1(), "rule__JointRef__RevAssignment_1");
					put(grammarAccess.getJointRefAccess().getPrisAssignment_2(), "rule__JointRef__PrisAssignment_2");
					put(grammarAccess.getJointRefAccess().getContAssignment_3(), "rule__JointRef__ContAssignment_3");
					put(grammarAccess.getInertialAccess().getNameAssignment_1(), "rule__Inertial__NameAssignment_1");
					put(grammarAccess.getInertialAccess().getInertiaAssignment_2(), "rule__Inertial__InertiaAssignment_2");
					put(grammarAccess.getInertialAccess().getMassAssignment_3(), "rule__Inertial__MassAssignment_3");
					put(grammarAccess.getInertialAccess().getOriginAssignment_4(), "rule__Inertial__OriginAssignment_4");
					put(grammarAccess.getInertiaAccess().getNameAssignment_1(), "rule__Inertia__NameAssignment_1");
					put(grammarAccess.getInertiaAccess().getIxxAssignment_3(), "rule__Inertia__IxxAssignment_3");
					put(grammarAccess.getInertiaAccess().getIxyAssignment_5(), "rule__Inertia__IxyAssignment_5");
					put(grammarAccess.getInertiaAccess().getIxzAssignment_7(), "rule__Inertia__IxzAssignment_7");
					put(grammarAccess.getInertiaAccess().getIyyAssignment_9(), "rule__Inertia__IyyAssignment_9");
					put(grammarAccess.getInertiaAccess().getIyzAssignment_11(), "rule__Inertia__IyzAssignment_11");
					put(grammarAccess.getInertiaAccess().getIzzAssignment_13(), "rule__Inertia__IzzAssignment_13");
					put(grammarAccess.getVisualAccess().getNameAssignment_1(), "rule__Visual__NameAssignment_1");
					put(grammarAccess.getVisualAccess().getOriginAssignment_2(), "rule__Visual__OriginAssignment_2");
					put(grammarAccess.getCollisionAccess().getNameAssignment_1(), "rule__Collision__NameAssignment_1");
					put(grammarAccess.getCollisionAccess().getOriginAssignment_2_1(), "rule__Collision__OriginAssignment_2_1");
					put(grammarAccess.getOriginAccess().getNameAssignment_1(), "rule__Origin__NameAssignment_1");
					put(grammarAccess.getOriginAccess().getXAssignment_3(), "rule__Origin__XAssignment_3");
					put(grammarAccess.getOriginAccess().getYAssignment_4(), "rule__Origin__YAssignment_4");
					put(grammarAccess.getOriginAccess().getZAssignment_5(), "rule__Origin__ZAssignment_5");
					put(grammarAccess.getOriginAccess().getRollAssignment_6_1(), "rule__Origin__RollAssignment_6_1");
					put(grammarAccess.getOriginAccess().getPitchAssignment_6_2(), "rule__Origin__PitchAssignment_6_2");
					put(grammarAccess.getOriginAccess().getYawAssignment_6_3(), "rule__Origin__YawAssignment_6_3");
					put(grammarAccess.getMassAccess().getNameAssignment_1(), "rule__Mass__NameAssignment_1");
					put(grammarAccess.getMassAccess().getMassValueInKilogramsAssignment_3(), "rule__Mass__MassValueInKilogramsAssignment_3");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalMyDslParser typedParser = (InternalMyDslParser) parser;
			typedParser.entryRuleRobot();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
