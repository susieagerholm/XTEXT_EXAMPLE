/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydot.scoping

import java.lang.reflect.Method
import org.eclipse.emf.common.util.EList
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider
import org.xtext.example.mydot.myDot.DataType
import org.xtext.example.mydot.myDot.DotExpression
import org.xtext.example.mydot.myDot.Entity
import org.xtext.example.mydot.myDot.EntityRef

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */

class MyDotScopeProvider extends AbstractDeclarativeScopeProvider {	
	
	//OLD PRE 2.9 METHOD FOR CUSTOM SCOPE
	// EReference never used
	// DotExpression in a URDF context must have access to 'current' scope object
	// Clarify if call mechanism provides the correct context object in URDF Model 
	
	
	def IScope scope_DotExpression_tail(DotExpression exp, EReference ref) {
        val head = exp.ref; 
        switch (head) { 
            EntityRef :  {
					val entity = getObjectByMethodNameAndReturnType(head as Object,"getEntity",null)
					val features = getObjectByMethodNameAndReturnType(entity,"getFeatures",null) as EList<EObject> 
					return Scopes::scopeFor(features)
            }
            DotExpression : {
				val tailFeature = getObjectByMethodNameAndReturnType(head as Object,"getTail",null)
				
				//Attributes
				if(getObjectByMethodNameAndReturnType(tailFeature,"getType",DataType)!=null)
					return IScope::NULLSCOPE
					
				//Entities
				val entity = getObjectByMethodNameAndReturnType(tailFeature,"getType",Entity)
				val features = getObjectByMethodNameAndReturnType(entity,"getFeatures",null) as EList<EObject>
				return Scopes::scopeFor(features)
			} // end DotExpression               
            default: IScope::NULLSCOPE
        } // end switch head
    } 
    

    def <T> Object getObjectByMethodNameAndReturnType(Object container, String name, Class<T> rType) {
    	val methods = container.class.methods
		for (Method method : methods) {
			if(method.name.equalsIgnoreCase(name)) {
				if(rType == null) {
					return method.invoke(container)
				} else {
					if(method.returnType.name.equals((rType.canonicalName))) {
						return method.invoke(container)
					}					
				}
			}
		}
    }
    
 } // end class
    


