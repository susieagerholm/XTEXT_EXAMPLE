/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydot.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydot.myDot.Attribute;
import org.xtext.example.mydot.myDot.DotExpression;
import org.xtext.example.mydot.myDot.Entity;
import org.xtext.example.mydot.myDot.EntityRef;
import org.xtext.example.mydot.myDot.Model;
import org.xtext.example.mydot.myDot.MyDotPackage;
import org.xtext.example.mydot.myDot.Reference;
import org.xtext.example.mydot.myDot.Usage;
import org.xtext.example.mydot.services.MyDotGrammarAccess;

@SuppressWarnings("all")
public class MyDotSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDotGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyDotPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyDotPackage.ATTRIBUTE:
				sequence_Attribute(context, (Attribute) semanticObject); 
				return; 
			case MyDotPackage.DOT_EXPRESSION:
				sequence_DotExpression(context, (DotExpression) semanticObject); 
				return; 
			case MyDotPackage.ENTITY:
				sequence_Entity(context, (Entity) semanticObject); 
				return; 
			case MyDotPackage.ENTITY_REF:
				sequence_EntityRef(context, (EntityRef) semanticObject); 
				return; 
			case MyDotPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case MyDotPackage.REFERENCE:
				sequence_Reference(context, (Reference) semanticObject); 
				return; 
			case MyDotPackage.USAGE:
				sequence_Usage(context, (Usage) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Feature returns Attribute
	 *     Attribute returns Attribute
	 *
	 * Constraint:
	 *     (name=ID type=DataType)
	 */
	protected void sequence_Attribute(ISerializationContext context, Attribute semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDotPackage.Literals.FEATURE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDotPackage.Literals.FEATURE__NAME));
			if (transientValues.isValueTransient(semanticObject, MyDotPackage.Literals.ATTRIBUTE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDotPackage.Literals.ATTRIBUTE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getAttributeAccess().getTypeDataTypeEnumRuleCall_3_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DotExpression returns DotExpression
	 *     DotExpression.DotExpression_1_0 returns DotExpression
	 *
	 * Constraint:
	 *     (ref=DotExpression_DotExpression_1_0 tail=[Feature|ID])
	 */
	protected void sequence_DotExpression(ISerializationContext context, DotExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDotPackage.Literals.DOT_EXPRESSION__REF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDotPackage.Literals.DOT_EXPRESSION__REF));
			if (transientValues.isValueTransient(semanticObject, MyDotPackage.Literals.DOT_EXPRESSION__TAIL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDotPackage.Literals.DOT_EXPRESSION__TAIL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDotExpressionAccess().getDotExpressionRefAction_1_0(), semanticObject.getRef());
		feeder.accept(grammarAccess.getDotExpressionAccess().getTailFeatureIDTerminalRuleCall_1_2_0_1(), semanticObject.getTail());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DotExpression returns EntityRef
	 *     DotExpression.DotExpression_1_0 returns EntityRef
	 *     EntityRef returns EntityRef
	 *
	 * Constraint:
	 *     entity=[Entity|ID]
	 */
	protected void sequence_EntityRef(ISerializationContext context, EntityRef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDotPackage.Literals.ENTITY_REF__ENTITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDotPackage.Literals.ENTITY_REF__ENTITY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEntityRefAccess().getEntityEntityIDTerminalRuleCall_1_0_1(), semanticObject.getEntity());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Entity returns Entity
	 *
	 * Constraint:
	 *     (name=ID features+=Feature*)
	 */
	protected void sequence_Entity(ISerializationContext context, Entity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     ((entities+=Entity+ usages+=Usage+) | usages+=Usage+)?
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Feature returns Reference
	 *     Reference returns Reference
	 *
	 * Constraint:
	 *     (name=ID type=[Entity|ID])
	 */
	protected void sequence_Reference(ISerializationContext context, Reference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDotPackage.Literals.FEATURE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDotPackage.Literals.FEATURE__NAME));
			if (transientValues.isValueTransient(semanticObject, MyDotPackage.Literals.REFERENCE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDotPackage.Literals.REFERENCE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReferenceAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getReferenceAccess().getTypeEntityIDTerminalRuleCall_3_0_1(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Usage returns Usage
	 *
	 * Constraint:
	 *     ref=DotExpression
	 */
	protected void sequence_Usage(ISerializationContext context, Usage semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDotPackage.Literals.USAGE__REF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDotPackage.Literals.USAGE__REF));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUsageAccess().getRefDotExpressionParserRuleCall_1_0(), semanticObject.getRef());
		feeder.finish();
	}
	
	
}
