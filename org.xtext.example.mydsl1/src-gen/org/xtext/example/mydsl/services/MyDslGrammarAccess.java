/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Model");
		private final Assignment cMethodsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cMethodsMethodParserRuleCall_0 = (RuleCall)cMethodsAssignment.eContents().get(0);
		
		//Model:
		//	methods+=Method*;
		@Override public ParserRule getRule() { return rule; }
		
		//methods+=Method*
		public Assignment getMethodsAssignment() { return cMethodsAssignment; }
		
		//Method
		public RuleCall getMethodsMethodParserRuleCall_0() { return cMethodsMethodParserRuleCall_0; }
	}
	public class MethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Method");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDefinitionBlocksAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDefinitionBlocksDefinitionBlockParserRuleCall_3_0 = (RuleCall)cDefinitionBlocksAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Method:
		//	"def" name=ID '{'
		//	definitionBlocks+=DefinitionBlock*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//"def" name=ID '{' definitionBlocks+=DefinitionBlock* '}'
		public Group getGroup() { return cGroup; }
		
		//"def"
		public Keyword getDefKeyword_0() { return cDefKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//definitionBlocks+=DefinitionBlock*
		public Assignment getDefinitionBlocksAssignment_3() { return cDefinitionBlocksAssignment_3; }
		
		//DefinitionBlock
		public RuleCall getDefinitionBlocksDefinitionBlockParserRuleCall_3_0() { return cDefinitionBlocksDefinitionBlockParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class DefinitionBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DefinitionBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableDefinitionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariableDefinitionsVariableDefinitionParserRuleCall_0_0 = (RuleCall)cVariableDefinitionsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVariableDefinitionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVariableDefinitionsVariableDefinitionParserRuleCall_1_1_0 = (RuleCall)cVariableDefinitionsAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeIDTerminalRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//DefinitionBlock:
		//	variableDefinitions+=VariableDefinition ("," variableDefinitions+=VariableDefinition)*
		//	":"
		//	type=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//variableDefinitions+=VariableDefinition ("," variableDefinitions+=VariableDefinition)* ":" type=ID
		public Group getGroup() { return cGroup; }
		
		//variableDefinitions+=VariableDefinition
		public Assignment getVariableDefinitionsAssignment_0() { return cVariableDefinitionsAssignment_0; }
		
		//VariableDefinition
		public RuleCall getVariableDefinitionsVariableDefinitionParserRuleCall_0_0() { return cVariableDefinitionsVariableDefinitionParserRuleCall_0_0; }
		
		//("," variableDefinitions+=VariableDefinition)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//variableDefinitions+=VariableDefinition
		public Assignment getVariableDefinitionsAssignment_1_1() { return cVariableDefinitionsAssignment_1_1; }
		
		//VariableDefinition
		public RuleCall getVariableDefinitionsVariableDefinitionParserRuleCall_1_1_0() { return cVariableDefinitionsVariableDefinitionParserRuleCall_1_1_0; }
		
		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=ID
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//ID
		public RuleCall getTypeIDTerminalRuleCall_3_0() { return cTypeIDTerminalRuleCall_3_0; }
	}
	public class VariableDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.VariableDefinition");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//VariableDefinition:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	
	
	private final ModelElements pModel;
	private final MethodElements pMethod;
	private final DefinitionBlockElements pDefinitionBlock;
	private final VariableDefinitionElements pVariableDefinition;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pMethod = new MethodElements();
		this.pDefinitionBlock = new DefinitionBlockElements();
		this.pVariableDefinition = new VariableDefinitionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	methods+=Method*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Method:
	//	"def" name=ID '{'
	//	definitionBlocks+=DefinitionBlock*
	//	'}';
	public MethodElements getMethodAccess() {
		return pMethod;
	}
	
	public ParserRule getMethodRule() {
		return getMethodAccess().getRule();
	}
	
	//DefinitionBlock:
	//	variableDefinitions+=VariableDefinition ("," variableDefinitions+=VariableDefinition)*
	//	":"
	//	type=ID;
	public DefinitionBlockElements getDefinitionBlockAccess() {
		return pDefinitionBlock;
	}
	
	public ParserRule getDefinitionBlockRule() {
		return getDefinitionBlockAccess().getRule();
	}
	
	//VariableDefinition:
	//	name=ID;
	public VariableDefinitionElements getVariableDefinitionAccess() {
		return pVariableDefinition;
	}
	
	public ParserRule getVariableDefinitionRule() {
		return getVariableDefinitionAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
